(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{92:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return r})),t.d(n,"default",(function(){return b}));var a=t(3),i=t(7),l=(t(0),t(100)),s={id:"questions",title:"Practice Questions",sidebar_label:"C++ Work Sheet"},c={unversionedId:"lang/questions",id:"lang/questions",isDocsHomePage:!1,title:"Practice Questions",description:"Overview",source:"@site/notes/lang/questions.md",slug:"/lang/questions",permalink:"/notes/lang/questions",editUrl:"https://github.com/rashikansar/notes/edit/main/notes/lang/questions.md",version:"current",lastUpdatedBy:"Rashik Ansar",lastUpdatedAt:1610890541,sidebar_label:"C++ Work Sheet",sidebar:"lang",previous:{title:"C++",permalink:"/notes/lang/cpp"}},r=[{value:"Overview",id:"overview",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Input/Output",id:"inputoutput",children:[]},{value:"Conditionals",id:"conditionals",children:[]}],u={toc:r};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"overview"},"Overview"),Object(l.b)("details",null,Object(l.b)("summary",null,"Print your name"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="my_name.cpp"',title:'"my_name.cpp"'}),'#include <iostream>\n\nint main() {\n  // Change string "YOUR NAME HERE" to your name\n  std::cout << "YOUR NAME HERE" << std::endl;\n  return 0;\n}\n'))),Object(l.b)("details",null,Object(l.b)("summary",null,"Print your name, age, hobbies "),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="bio.cpp"',title:'"bio.cpp"'}),'#include <iostream>\n\nint main() {\n  std::cout << "C++\\n"; // \\n is new line\n  std::cout << 25 << std::endl;\n  std::cout << "Coding" << std::endl;\n\n  return 0;\n}\n'))),Object(l.b)("h2",{id:"variables"},"Variables"),Object(l.b)("details",null,Object(l.b)("summary",null,"Create a variable to store your favourite number and print it"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="fav_num.cpp"',title:'"fav_num.cpp"'}),"#include <iostream>\n\nusing namespace std;\n\nint main() {\n  // declare and initialize a variable\n  int favNum = 3;\n  // printing the variable value\n  cout << favNum << endl;\n\n  return 0;\n}\n"))),Object(l.b)("details",null,Object(l.b)("summary",null,"Create variables to store your name, favourite number and print it"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="fav_num.cpp"',title:'"fav_num.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  // declare and initialize variables\n  string myName = "C++";\n  int favNum = 3;\n  // printing the variable value\n  cout << myName << endl;\n  cout << favNum << endl;\n\n  return 0;\n}\n'))),Object(l.b)("details",null,Object(l.b)("summary",null,"Swap values of two variables"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="swap_values.cpp"',title:'"swap_values.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a = 10, b = 20;\n\n  cout << "Before Swapping... A: " << a  << " B: " <<b << endl;\n\n  // swapping values using third variable temp\n  int temp = a;\n  a = b;\n  b = temp;\n\n  cout << "After Swapping... A: " << a  << " B: " <<b << endl;\n}\n')),Object(l.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("details",null,Object(l.b)("summary",null,"Swap the values of two variables without using third variable"),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="swap_values2.cpp"',title:'"swap_values2.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a = 10, b = 20;\n\n  cout << "Before Swapping... A: " << a  << " B: " <<b << endl;\n\n  // swapping values wihtout using third variable\n  a = a + b;\n  b = a - b;\n  a = a - b;\n\n  cout << "After Swapping... A: " << a  << " B: " <<b << endl;\n}\n')))))),Object(l.b)("h2",{id:"inputoutput"},"Input/Output"),Object(l.b)("details",null,Object(l.b)("summary",null,"Take input of favourite number and print it on screen"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="numInput.cpp"',title:'"numInput.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int favNum;\n  cout << "Enter yout fav.number: ";\n  cin >> favNum;\n  cout << favNum << endl;\n  return 0;\n}\n'))),Object(l.b)("details",null,Object(l.b)("summary",null,"Take full name of user and age of user as inputs and print them "),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="stringInput.cpp"',title:'"stringInput.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  string name;\n  cout << "Enter your name : ";\n  // using getline since cin considers space as termination of input\n  getline(cin, name);\n\n  int age;\n  cout << "Enter your age: ";\n  cin >> age;\n\n  cout << "Name: " << name << endl;\n  cout << "Age: " << age << endl;\n\n  return 0;\n}\n\n'))),Object(l.b)("h2",{id:"conditionals"},"Conditionals"),Object(l.b)("details",null,Object(l.b)("summary",null,"Check the given number is odd or even and print"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="odd_even.cpp"',title:'"odd_even.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  // even odd and zero is neither even nor odd\n  int n;\n  cin >> n;\n\n  if (n != 0) {\n    if (n % 2 == 0) {\n      cout << n <<" is even" << endl;\n    } else {\n      cout << n <<" is odd" << endl;\n    }\n  } else {\n    cout << n <<" is neither odd nor even." << endl;\n  }\n  return 0;\n}\n'))),Object(l.b)("details",null,Object(l.b)("summary",null,"Largest among three numbers"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="largest3.cpp"',title:'"largest3.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  float a, b, c;\n  cout << "Enter three numbers: ";\n  cin >> a >> b >> c;\n\n  if (a >= b) {\n    if (a >= c) {\n      cout << a <<" is the largest number." << endl;\n    } else {\n      cout << c <<" is the largest number." << endl;\n    }\n  } else {\n    if (b >= c) {\n      cout << b <<" is the largest number." << endl;\n    } else {\n      cout << c <<" is the largest number." << endl;\n    }\n  }\n\n  /** // using logical operators in conditions\n  if (a >= b && a >= c) {\n    cout << a <<" is the largest number." << endl;\n  }\n  else if (b >= a && b >= c) {\n    cout << b <<" is the largest number." << endl;\n  }\n  else {\n    cout << c <<" is the largest number." << endl;\n  }\n  **/\n}\n\n'))),Object(l.b)("details",null,Object(l.b)("summary",null,"check whether the triangle formed by the given sides(inputs) is equilateral, isosceles, or scalene."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="triangle.cpp"',title:'"triangle.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a, b, c;\n  cout << "Enter three sides of the triangle: ";\n  cin >> a >> b >> c;\n\n// Check for equilateral triangle\n  if (a == b && b == c) { //a = b = c\n    cout << "Equilateral Triangle";\n  }\n  // Check for isoceles triangle\n  else if (a == b || b == c || c == a) { // a=b or b = c or c = a\n    cout << "Isoceles Triangle";\n  }\n  // Otherwise scalene triangle\n  else {\n    cout << "Scalene Triangle";\n  }\n\n  return 0;\n}\n'))))}b.isMDXComponent=!0}}]);