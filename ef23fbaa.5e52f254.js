(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{154:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/OOPs-e438a70fd92d79d098a7a3f72cd29cdc.svg"},94:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return r})),a.d(t,"default",(function(){return d}));var n=a(3),s=a(7),c=(a(0),a(102)),i={id:"oops",title:"Object-Oriented Programming",sidebar_label:"Object-Oriented Programming"},o={unversionedId:"lang/oops",id:"lang/oops",isDocsHomePage:!1,title:"Object-Oriented Programming",description:"Introduction",source:"@site/notes/lang/oops.md",slug:"/lang/oops",permalink:"/notes/lang/oops",editUrl:"https://github.com/rashikansar/notes/edit/main/notes/lang/oops.md",version:"current",lastUpdatedBy:"Rashik Ansar",lastUpdatedAt:1611670520,sidebar_label:"Object-Oriented Programming",sidebar:"lang",previous:{title:"C++",permalink:"/notes/lang/cpp"},next:{title:"Standard Template Library",permalink:"/notes/lang/stl"}},r=[{value:"Introduction",id:"introduction",children:[]},{value:"Advantages of OOP",id:"advantages-of-oop",children:[]},{value:"Class",id:"class",children:[{value:"Data Members",id:"data-members",children:[]},{value:"Methods :",id:"methods-",children:[]},{value:"Constructor and Destructor",id:"constructor-and-destructor",children:[]}]},{value:"Object",id:"object",children:[]}],l={toc:r};function d(e){var t=e.components,i=Object(s.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},l,i,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"introduction"},"Introduction"),Object(c.b)("p",null,"C++ is a combination of a procedural and an object-oriented language. Object-Oriented programming is a programming paradigm that relies on the concept of classes and objects. OOP is based on the notion that you should divide your program not into tasks, but into models of physical objects. While this seems abstract at first, it becomes clearer when you consider physical objects in terms of their classes, components, properties, and behaviors."),Object(c.b)("p",null,Object(c.b)("img",{alt:"OOPs",src:a(154).default})),Object(c.b)("h2",{id:"advantages-of-oop"},"Advantages of OOP"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"OOPs is closer to real world model."),Object(c.b)("li",{parentName:"ol"},"Hierarchical relationship among objects can be well-represented through inheritance."),Object(c.b)("li",{parentName:"ol"},"Data can be made hidden or public as per the need. Only the necessary data is exposed enhancing the data security."),Object(c.b)("li",{parentName:"ol"},"Increased modularity adds ease to program development."),Object(c.b)("li",{parentName:"ol"},"Private data is accessible only through designed interface in a way suited to the program.")),Object(c.b)("h2",{id:"class"},"Class"),Object(c.b)("p",null,"Class is a blueprint from which objects are created. In C++, new types are mostly created using a class. To write object-oriented programs, we need to create a class, as a type, and then instantiate objects as instances of that type."),Object(c.b)("div",{className:"admonition admonition-info alert alert--info"},Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(c.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"classes dont consume any space."))),Object(c.b)("p",null,"A class in C++ contains"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"Data memebers: are the properties/attributes of class"),Object(c.b)("li",{parentName:"ol"},"Methods: are the behaviours of the class"),Object(c.b)("li",{parentName:"ol"},"Constructor: It's used to create instances of class (Object)")),Object(c.b)("h3",{id:"data-members"},"Data Members"),Object(c.b)("p",null,"Data members are the properties that are present in a class. The type of these properties can be modified by the use of special keywords called modifiers. Let us build our own student class and learn about them."),Object(c.b)("h4",{id:"static-and-non-static-properties-"},"Static and Non Static Properties :"),Object(c.b)("p",null,"Static properties are those that are common to all objects and belong to the class rather each specific object. So each object that we create doesn\u2019t have their copy. They are shared by all the objects of the class. We need to write the static keyword before it in order\nto make it static."),Object(c.b)("p",null,"An important point to note is that whenever we create a new object only the non static data member copies are created and the static properties are stored within the class only! This could be considered a very memory efficient practice as static members of a class are made only once."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="static_non_static_props.cpp"',title:'"static_non_static_props.cpp"'}),"// create a class named Student\nclass Student{\n  // Static property num of students in class\n  static int numStudents;\n  //  Non-static properties\n  char name[10];\n  int rollNo;\n};\n")),Object(c.b)("h4",{id:"access-modifiers"},"Access Modifiers"),Object(c.b)("div",{className:"admonition admonition-info alert alert--info"},Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(c.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"When there is no access modifier for a data member, it is private by default."),Object(c.b)("p",{parentName:"div"},"The instance member functions(methods) of a class are normally set to public."))),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},Object(c.b)("strong",{parentName:"li"},"Private:")," If we make any data member as private it is visible only within the class i.e. it can be accessed by and through the methods of the same class. So we can provide setters and getters function through which they can be accessed outside the class"),Object(c.b)("li",{parentName:"ol"},Object(c.b)("strong",{parentName:"li"},"Protected:")," It is only accesible within the class and sub-class"),Object(c.b)("li",{parentName:"ol"},Object(c.b)("strong",{parentName:"li"},"Public:")," It is accesible everywhere")),Object(c.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(c.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"It is better to make a variable private and then provide getters and setters in case we wish to allow others to view and change it than making the variable public. Because by providing setter we can actually add constraints to the function and update value only if\nthey are satisfied"))),Object(c.b)("h3",{id:"methods-"},"Methods :"),Object(c.b)("p",null,"The second part of the class definition declares the member functions of the class; that is, it declares all functions that are used to simulate the behavior of the class. The methods are called on the object name by using the dot operator."),Object(c.b)("h4",{id:"static-vs-non-static-methods"},"Static v/s Non Static Methods"),Object(c.b)("p",null,"Like data members, methods of a class can also be static which means those methods belong to the class rather than the objects for the class. These methods are directly called by the class name."),Object(c.b)("p",null,"As the static methods belong to a class we don\u2019t need any instance of a class to access them. An important implication of this point is that the non static properties thus can\u2019t be accessed by the static methods as there is no specific instance of the class associated with them (the non static properties are specific to each object). So, non static members and the \u2018this\u2019 keyword can\u2019t be used with the static functions. Thus these methods are generally used for the static properties of the class only!"),Object(c.b)("p",null,"The non static methods on the other hand are called on an instance of a class or an object and can thus access both static and non static properties present in the object. The access modifiers work the same with the methods as they do with the data members. The public methods can be accessed anywhere whereas the private methods are available only within the same class. Thus private methods can be used to work with the data members that we don\u2019t wish to expose to the clients."),Object(c.b)("h3",{id:"constructor-and-destructor"},"Constructor and Destructor"),Object(c.b)("p",null,"A constructor is a member function that creates an object when it is called and initializes the data members of an object when it is executed. The declaration of the data members in the class definition does not initialize the data members; the declaration just gives the names and the types of the data members"),Object(c.b)("p",null,"A constructor has two characteristics: It does not have a return value, and its name is the same as the name of the class. A constructor cannot have a return value (not even void) because it is not designed to return anything; its purpose is different. It creates an object and initializes the data members. Although we will see that a constructor may also do some other tasks, such as validation of values, these tasks are also considered part of the initialization."),Object(c.b)("p",null,"We can have three types of constructors in a class"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"parameter constructors"),Object(c.b)("li",{parentName:"ol"},"default constructors"),Object(c.b)("li",{parentName:"ol"},"copy constructors")),Object(c.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(c.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"The parameter constructor can be overloaded for a class but not other constructors."))),Object(c.b)("p",null,"Like a constructor, a destructor has two special characteristics. First, the name of the destructor is the name of the class preceded by a tilde symbol (",Object(c.b)("inlineCode",{parentName:"p"},"~"),"), but the tilde is added to the first name, not the last name (the last name is the same for all member functions). Second, like a constructor, a destructor cannot have a return value (not even void) because it returns nothing. A destructor is guaranteed to be automatically called and executed by the system when the object instantiated from the class goes out of scope. In other words, if we have instantiated five objects from the class, the destructor is automatically called five times to guarantee that all objects are cleaned up. Cleanup is most important if the constructed has called resources such as files. After the program is terminated, the allocated memory is recycled. A destructor can take no arguments, which means it cannot be overloaded."),Object(c.b)("div",{className:"admonition admonition-info alert alert--info"},Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(c.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"A constructor is a special member function that creates and initializes an object."),Object(c.b)("p",{parentName:"div"},"A destructor is a special member function that cleans and destroys an object."))),Object(c.b)("h2",{id:"object"},"Object"),Object(c.b)("p",null,"Object is the instance of the class. which will have the copy of the data members and methods that can be applied on the object."),Object(c.b)("p",null,"Lets see the example of the class and object"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="oop.cpp"',title:'"oop.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\n// Class Definition\nclass Circle {\n  private:\n    double radius;\n  public:\n    Circle(double radius); // Parameter Constructor\n    Circle(); // Default Constructor\n    ~Circle(); // Destructor\n    Circle(const Circle& circle);\n\n    void set_radius(double radius); // Setter (Mutator)\n    double get_radius() const; // Getter (Accessor)\n    double get_area() const; // Getter (Accessor)\n    double get_perimeter() const; // Getter (Accessor)\n};\n\n// Constructors and Member Function (Methods) Definition\nCircle::Circle(double rds): radius(rds) {\n  cout << "The parameter constructor was called. " << endl;\n}\n\nCircle::Circle(): radius(0.0) {\n  cout << "The default constructor was called. " << endl;\n}\n\nCircle::Circle(const Circle& circle): radius(circle.radius) {\n  cout << "The copy constructor was called. " << endl;\n}\n\nCircle:: ~Circle() {\n  cout << "The destructor was called for circle with radius :" << radius << endl;\n}\n\nvoid Circle:: set_radius(double value) {\n  radius = value;\n}\n\ndouble Circle::get_radius() const {\n  return radius;\n}\n\ndouble Circle::get_area() const {\n  const double PI = 3.14;\n  return (PI * radius * radius);\n}\n\ndouble Circle::get_perimeter() const {\n  const double PI = 3.14;\n  return (2* PI * radius);\n}\n\nint main() {\n  // Object creation\n  Circle circle1(5.2);\n  cout << "Radius: " << circle1.get_radius() << endl;\n  cout << "Area: " << circle1.get_area() << endl;\n  cout << "Perimeter: " << circle1.get_perimeter() << endl;\n\n  Circle circle2(circle1);\n  cout << "Radius: " << circle2.get_radius() << endl;\n  cout << "Area: " << circle2.get_area() << endl;\n  cout << "Perimeter: " << circle2.get_perimeter() << endl;\n\n  Circle circle3;\n  cout << "Radius: " << circle3.get_radius() << endl;\n  cout << "Area: " << circle3.get_area() << endl;\n  cout << "Perimeter: " << circle3.get_perimeter() << endl;\n\n  return 0;\n}\n')),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-console",metastring:'title="output"',title:'"output"'}),"The parameter constructor was called.\nRadius: 5.2\nArea: 84.9056\nPerimeter: 32.656\nThe copy constructor was called.\nRadius: 5.2\nArea: 84.9056\nPerimeter: 32.656\nThe default constructor was called.\nRadius: 0\nArea: 0\nPerimeter: 0\nThe destructor was called for circle with radius: 0\nThe destructor was called for circle with radius: 5.2\nThe destructor was called for circle with radius: 5.2\n")))}d.isMDXComponent=!0}}]);