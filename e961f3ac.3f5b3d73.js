(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{97:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return j})),t.d(n,"metadata",(function(){return O})),t.d(n,"toc",(function(){return v})),t.d(n,"default",(function(){return N}));var a=t(3),i=t(7),l=t(0),c=t.n(l),r=t(103),s=t(116),u=t(100),b=t(93),o=t.n(b);const p=37,m=39;var d=function(e){const{lazy:n,block:t,defaultValue:a,values:i,groupId:r,className:b}=e,{tabGroupChoices:d,setTabGroupChoices:g}=Object(s.a)(),[j,O]=Object(l.useState)(a),v=l.Children.toArray(e.children);if(null!=r){const e=d[r];null!=e&&e!==j&&i.some((n=>n.value===e))&&O(e)}const h=e=>{O(e),null!=r&&g(r,e)},N=[];return c.a.createElement("div",null,c.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(u.a)("tabs",{"tabs--block":t},b)},i.map((({value:e,label:n})=>c.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===e,className:Object(u.a)("tabs__item",o.a.tabItem,{"tabs__item--active":j===e}),key:e,ref:e=>N.push(e),onKeyDown:e=>{((e,n,t)=>{switch(t.keyCode){case m:((e,n)=>{const t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()})(e,n);break;case p:((e,n)=>{const t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,n)}})(N,e.target,e)},onFocus:()=>h(e),onClick:()=>{h(e)}},n)))),n?Object(l.cloneElement)(v.filter((e=>e.props.value===j))[0],{className:"margin-vert--md"}):c.a.createElement("div",{className:"margin-vert--md"},v.map(((e,n)=>Object(l.cloneElement)(e,{key:n,hidden:e.props.value!==j})))))};var g=function({children:e,hidden:n,className:t}){return c.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:t}),e)},j={id:"questions",title:"Practice Questions",sidebar_label:"C++ Work Sheet"},O={unversionedId:"lang/questions",id:"lang/questions",isDocsHomePage:!1,title:"Practice Questions",description:"Overview",source:"@site/notes/lang/questions.md",slug:"/lang/questions",permalink:"/notes/lang/questions",editUrl:"https://github.com/rashikansar/notes/edit/main/notes/lang/questions.md",version:"current",lastUpdatedBy:"Rashik Ansar",lastUpdatedAt:1615118582,sidebar_label:"C++ Work Sheet",sidebar:"lang",previous:{title:"Standard Template Library",permalink:"/notes/lang/stl"}},v=[{value:"Overview",id:"overview",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Input/Output",id:"inputoutput",children:[]},{value:"Conditionals",id:"conditionals",children:[]},{value:"Loops",id:"loops",children:[{value:"Patterns",id:"patterns",children:[]}]},{value:"Functions",id:"functions",children:[]}],h={toc:v};function N(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},h,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("details",null,Object(r.b)("summary",null,"Print your name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="my_name.cpp"',title:'"my_name.cpp"'}),'#include <iostream>\n\nint main() {\n  // Change string "YOUR NAME HERE" to your name\n  std::cout << "YOUR NAME HERE" << std::endl;\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Print your name, age, hobbies "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="bio.cpp"',title:'"bio.cpp"'}),'#include <iostream>\n\nint main() {\n  std::cout << "C++\\n"; // \\n is new line\n  std::cout << 25 << std::endl;\n  std::cout << "Coding" << std::endl;\n\n  return 0;\n}\n'))),Object(r.b)("h2",{id:"variables"},"Variables"),Object(r.b)("details",null,Object(r.b)("summary",null,"Create a variable to store your favourite number and print it"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="fav_num.cpp"',title:'"fav_num.cpp"'}),"#include <iostream>\n\nusing namespace std;\n\nint main() {\n  // declare and initialize a variable\n  int favNum = 3;\n  // printing the variable value\n  cout << favNum << endl;\n\n  return 0;\n}\n"))),Object(r.b)("details",null,Object(r.b)("summary",null,"Create variables to store your name, favourite number and print it"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="fav_num.cpp"',title:'"fav_num.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  // declare and initialize variables\n  string myName = "C++";\n  int favNum = 3;\n  // printing the variable value\n  cout << myName << endl;\n  cout << favNum << endl;\n\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Swap values of two variables"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="swap_values.cpp"',title:'"swap_values.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a = 10, b = 20;\n\n  cout << "Before Swapping... A: " << a  << " B: " <<b << endl;\n\n  // swapping values using third variable temp\n  int temp = a;\n  a = b;\n  b = temp;\n\n  cout << "After Swapping... A: " << a  << " B: " <<b << endl;\n}\n')),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("details",null,Object(r.b)("summary",null,"Swap the values of two variables without using third variable"),Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="swap_values2.cpp"',title:'"swap_values2.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a = 10, b = 20;\n\n  cout << "Before Swapping... A: " << a  << " B: " <<b << endl;\n\n  // swapping values wihtout using third variable\n  a = a + b;\n  b = a - b;\n  a = a - b;\n\n  cout << "After Swapping... A: " << a  << " B: " <<b << endl;\n}\n')))))),Object(r.b)("h2",{id:"inputoutput"},"Input/Output"),Object(r.b)("details",null,Object(r.b)("summary",null,"Take input of favourite number and print it on screen"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="numInput.cpp"',title:'"numInput.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int favNum;\n  cout << "Enter yout fav.number: ";\n  cin >> favNum;\n  cout << favNum << endl;\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Take full name of user and age of user as inputs and print them "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="stringInput.cpp"',title:'"stringInput.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  string name;\n  cout << "Enter your name : ";\n  // using getline since cin considers space as termination of input\n  getline(cin, name);\n\n  int age;\n  cout << "Enter your age: ";\n  cin >> age;\n\n  cout << "Name: " << name << endl;\n  cout << "Age: " << age << endl;\n\n  return 0;\n}\n\n'))),Object(r.b)("h2",{id:"conditionals"},"Conditionals"),Object(r.b)("details",null,Object(r.b)("summary",null,"Check the given number is odd or even and print"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="odd_even.cpp"',title:'"odd_even.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  // even odd and zero is neither even nor odd\n  int n;\n  cin >> n;\n\n  if (n != 0) {\n    if (n % 2 == 0) {\n      cout << n <<" is even" << endl;\n    } else {\n      cout << n <<" is odd" << endl;\n    }\n  } else {\n    cout << n <<" is neither odd nor even." << endl;\n  }\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Largest among three numbers"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="largest3.cpp"',title:'"largest3.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  float a, b, c;\n  cout << "Enter three numbers: ";\n  cin >> a >> b >> c;\n\n  if (a >= b) {\n    if (a >= c) {\n      cout << a <<" is the largest number." << endl;\n    } else {\n      cout << c <<" is the largest number." << endl;\n    }\n  } else {\n    if (b >= c) {\n      cout << b <<" is the largest number." << endl;\n    } else {\n      cout << c <<" is the largest number." << endl;\n    }\n  }\n\n  /** // using logical operators in conditions\n  if (a >= b && a >= c) {\n    cout << a <<" is the largest number." << endl;\n  }\n  else if (b >= a && b >= c) {\n    cout << b <<" is the largest number." << endl;\n  }\n  else {\n    cout << c <<" is the largest number." << endl;\n  }\n  **/\n}\n\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"check whether the triangle formed by the given sides(inputs) is equilateral, isosceles, or scalene."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="triangle.cpp"',title:'"triangle.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a, b, c;\n  cout << "Enter three sides of the triangle: ";\n  cin >> a >> b >> c;\n\n// Check for equilateral triangle\n  if (a == b && b == c) { //a = b = c\n    cout << "Equilateral Triangle";\n  }\n  // Check for isoceles triangle\n  else if (a == b || b == c || c == a) { // a=b or b = c or c = a\n    cout << "Isoceles Triangle";\n  }\n  // Otherwise scalene triangle\n  else {\n    cout << "Scalene Triangle";\n  }\n\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Given coefficients of a quadratic equation , you need to print the nature of the roots (Real and Distinct , Real and Equal or Imaginary) and the roots.",Object(r.b)("p",null,"If Real and Distinct , print the roots in increasing order.\nIf Real and Equal , print the same repeating root twice\nIf Imaginary , no need to print the roots."),Object(r.b)("p",null,"Note : Print only the integer part of the roots.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="quadratic_equation.cpp"',title:'"quadratic_equation.cpp"'}),'#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a, b, c, d;\n  cin >> a >> b >> c;\n  d = (b * b) - (4 * a * c);\n  int root1 = (sqrt(d) - b) / (2 * a);\n  int root2 = -1 * (sqrt(d) + b) / (2 * a);\n\n  //   when b2 \u2212 4ac is positive, we get two Real solutions\n  if (d > 0 && a != 0) {\n    cout << "Real and Distinct" << endl;\n    cout << root2 << " " << root1 << endl;\n  }\n  // when it is zero we get just ONE real solution (both answers are the same)\n  else if (d == 0 && a != 0) {\n    cout << "Real and Equal" << endl;\n    cout << root1 << " " << root1 << endl;\n  }\n  // when it is negative we get a pair of Complex solutions\n  else {\n    cout << "Imaginary" << endl;\n  }\n\n  return 0;\n}\n'))),Object(r.b)("h2",{id:"loops"},"Loops"),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Check out for pattern questions on GeeksForGeeks or ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://codescracker.com/cpp/program/cpp-program-print-star-pyramid-patterns.htm"}),"Here")))),Object(r.b)("details",null,Object(r.b)("summary",null,"Read N numbers and print their average. HINT: You would be given first N, and then N integers of the list."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="average.cpp"',title:'"average.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int N, num, total= 0;\n  cin >> N;\n  int count = N;\n  while(count--) {\n    cin >> num;\n    total += num;\n  }\n  cout << "Average :" << (total/N) << endl;\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Given a number check if it is a member of Fibonacci sequence or not?"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="is_Fibonacci.cpp"',title:'"is_Fibonacci.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int n, a = 0, b = 1, c = a + b;\n  cin >> n;\n\n  if(n == a || n == b) {\n    cout << "Fibonacci Sequence Number" << endl;\n    return 0;\n  }\n\n  while(c <= n) {\n    if (n == c) {\n      cout << "Fibonacci Sequence Number" << endl;\n      return 0;\n    }\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  cout << "Not a Fibonacci Sequence Number" << endl;\n\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Given a number N, find sum of its digits"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="sum_of_digits.cpp"',title:'"sum_of_digits.cpp"'}),"#include <iostream>\n\nusing namespace std;\n\nint main() {\n  long long n;\n  int rem, total = 0;\n  cin >> n;\n\n  while (n > 0) {\n    rem = n % 10;\n    total += rem;\n    n /= 10;\n  }\n  cout << total << endl;\n\n  return 0;\n}\n"))),Object(r.b)("h3",{id:"patterns"},"Patterns"),Object(r.b)("details",null,Object(r.b)("summary",null,"Print the following pattern (square)"),Object(r.b)(d,{className:"unique-tabs",defaultValue:"_out",values:[{label:"Input",value:"_in"},{label:"Output",value:"_out"}],mdxType:"Tabs"},Object(r.b)(g,{value:"_in",mdxType:"TabItem"},Object(r.b)("code",null,"n = 5")),Object(r.b)(g,{value:"_out",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"* * * * *\n* * * * *\n* * * * *\n* * * * *\n* * * * * \n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="pattern.cpp"',title:'"pattern.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= n; j++) {\n      cout << "* ";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Print the following pattern (Rectangle)"),Object(r.b)(d,{className:"unique-tabs",defaultValue:"_out",values:[{label:"Input",value:"_in"},{label:"Output",value:"_out"}],mdxType:"Tabs"},Object(r.b)(g,{value:"_in",mdxType:"TabItem"},Object(r.b)("code",null,"row = 4 col = 7")),Object(r.b)(g,{value:"_out",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"*******\n*******\n*******\n*******\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="pattern.cpp"',title:'"pattern.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int row, col;\n  cin >> row >> col;\n  for (int i = 1; i <= row; i++) {\n    for (int j = 1; j <= col; j++) {\n      cout << "*";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Print the following pattern (Hollow Rectangle)"),Object(r.b)(d,{className:"unique-tabs",defaultValue:"_out",values:[{label:"Input",value:"_in"},{label:"Output",value:"_out"}],mdxType:"Tabs"},Object(r.b)(g,{value:"_in",mdxType:"TabItem"},Object(r.b)("code",null,"row = 4 col = 8")),Object(r.b)(g,{value:"_out",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"********\n*      *\n*      *\n********\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="pattern.cpp"',title:'"pattern.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int row, col;\n  cin >> row >> col;\n  for (int i = 1; i <= row; i++) {\n    for (int j = 1; j <= col; j++) {\n      if (i == 1 || i == row || j == 1 || j == col) {\n        cout << "*";\n      } else {\n        cout << " ";\n      }\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Print the following pattern "),Object(r.b)(d,{className:"unique-tabs",defaultValue:"_out",values:[{label:"Input",value:"_in"},{label:"Output",value:"_out"}],mdxType:"Tabs"},Object(r.b)(g,{value:"_in",mdxType:"TabItem"},Object(r.b)("code",null,"n = 6")),Object(r.b)(g,{value:"_out",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"1\n2 2\n3 3 3\n4 4 4 4\n5 5 5 5 5\n6 6 6 6 6 6\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="pattern.cpp"',title:'"pattern.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int n;\n  cin >> n;\n\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= i; j++) {\n      cout << i << " ";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n'))),Object(r.b)("details",null,Object(r.b)("summary",null,"Print the following pattern (Floyd's Triangle)"),Object(r.b)(d,{className:"unique-tabs",defaultValue:"_out",values:[{label:"Input",value:"_in"},{label:"Output",value:"_out"}],mdxType:"Tabs"},Object(r.b)(g,{value:"_in",mdxType:"TabItem"},Object(r.b)("code",null,"n = 5")),Object(r.b)(g,{value:"_out",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"1 \n2 3 \n4 5 6 \n7 8 9 10 \n11 12 13 14 15\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="pattern.cpp"',title:'"pattern.cpp"'}),'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int n, count = 1;\n  cin >> n;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= i; j++) {\n      cout << count << " ";\n      count++;\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n'))),Object(r.b)("h2",{id:"functions"},"Functions"),Object(r.b)("details",null,Object(r.b)("summary",null,"Write a function to reverse the given number N as input."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:'title="reverse_num.cpp"',title:'"reverse_num.cpp"'}),"#include <iostream>\n\nusing namespace std;\n\nint reverse(int num) {\n  int rev_num = 0;\n  while (num > 0) {\n    rev_num = rev_num * 10 + num % 10;\n    num = num / 10;\n  }\n  return rev_num;\n}\n\nint main() {\n  int num;\n  cin >> num;\n  int ans = 0;\n  while (num > 0) {\n    ans = ans * 10 + num % 10;\n    num = num / 10;\n  }\n\n  cout << ans << endl;\n  return 0;\n}\n"))))}N.isMDXComponent=!0}}]);